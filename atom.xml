<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bofeng.github.io</id>
    <title>0xBF</title>
    <updated>2020-08-13T03:55:41.710Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bofeng.github.io"/>
    <link rel="self" href="https://bofeng.github.io/atom.xml"/>
    <logo>https://bofeng.github.io/images/avatar.png</logo>
    <icon>https://bofeng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 0xBF</rights>
    <entry>
        <title type="html"><![CDATA[MacOS的Battery显示充电状态不对的问题]]></title>
        <id>https://bofeng.github.io/post/macos-de-battery-xian-shi-chong-dian-zhuang-tai-bu-dui-de-wen-ti/</id>
        <link href="https://bofeng.github.io/post/macos-de-battery-xian-shi-chong-dian-zhuang-tai-bu-dui-de-wen-ti/">
        </link>
        <updated>2020-08-12T15:51:27.000Z</updated>
        <content type="html"><![CDATA[<p>已经第二次遇到这个问题了，MBP显示只剩1%的电了，就算插着充电器，也充不进电，而且电量一直在下降。就算重启也没用。<br>
重置了电池的SMC之后就好了，方法：<br>
1，关机<br>
2，按住Ctrl + Shift + Option + Power Button 五秒<br>
3，按Power Button开机<br>
然后再充电，电池状态就显示正常了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Setup wireguard VPN]]></title>
        <id>https://bofeng.github.io/post/setup-wireguard-vpn/</id>
        <link href="https://bofeng.github.io/post/setup-wireguard-vpn/">
        </link>
        <updated>2020-05-26T09:18:24.000Z</updated>
        <content type="html"><![CDATA[<p>It is really easy to configure wireguard VPN, compare to the old IPsec and OpenVPN methods.</p>
<p>In wireguard method, there is no server/client, they are all peers. So a &quot;server&quot; is  a peer, a client is also a peer. If we want to let multi clients to connect to a server, they are actually multi peers connecting to one peer (server).</p>
<h2 id="1-server-configuration">1, Server configuration</h2>
<p>On ubuntu &lt; 19.10, you need to do <code>sudo add-apt-repository ppa:wireguard/wireguard</code> first. Version &gt;= 19.10, you can just run: <code>sudo apt install wireguard</code></p>
<p>Once done, generate private-key and public-key pair for your server:</p>
<pre><code class="language-bash">$ wg genkey
# this will generate a private key, e.g. sL9JUT8axlP4wr6udFCraTLxIVNnYLKHNKtxt/JC42w=
# now use this private key to generate a public key
$ echo &quot;sL9JUT8axlP4wr6udFCraTLxIVNnYLKHNKtxt/JC42w=&quot; | wg pubkey
# this will generate a public key, e.g. +cITDHN+T/AseY9eA4SuZQilDUALxC0lCwtHNC6L8yU=
</code></pre>
<p>Now go to <code>/etc/wireguard/</code> folder, add a config file: <code>wg0.conf</code>:</p>
<pre><code>[Interface]
Address = 10.0.0.1/24
DNS = 1.1.1.1
PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
ListenPort = 51820
PrivateKey = sL9JUT8axlP4wr6udFCraTLxIVNnYLKHNKtxt/JC42w=
</code></pre>
<p>In the <code>PostUp</code> and <code>PostDown</code> step, replace <code>eth0</code> if your network is running on a different interface.</p>
<p>Here we are using 51820 as the port. If you are using <code>ufw</code>, remember to unblock this port (wireguard is running on UDP protocol)</p>
<pre><code class="language-bash">$ ufw allow 51820/udp
$ ufw status
</code></pre>
<h2 id="2-client-setup">2, Client setup</h2>
<p>Client is another peer. Install client here: <a href="https://www.wireguard.com/install/">https://www.wireguard.com/install/</a></p>
<p>Wireguard uses public key to identify a peer, so the first setup is still generate private/public key pair:</p>
<ul>
<li>MacOS user: open the Wireguard app, click &quot;Add Tunnel&quot; &gt; &quot;Empty Tunnel&quot;, a window will pop-up to show generated private/public key, save those keys somewhere, then click &quot;Discard&quot; (Don't click save)</li>
<li>Windows user: open the Wireguard app, click &quot;Add Tunnel&quot; &gt; &quot;Empty Tunnel&quot;, a window will pop-up to show generated private/public key, save those keys somewhere, then click &quot;Cancel&quot; (Don't click save)</li>
<li>Ubuntu user: use the same way which used by server in above step. i.e. the &quot;wg genkey&quot; etc. method.</li>
</ul>
<p>Once you have the private key and public key, create a config file anywhere (If you are using Ubuntu, put that config in <code>/etc/wireguard/wgclient.conf</code>), the content is like this:</p>
<pre><code>[Interface]
DNS = 1.1.1.1
PrivateKey = &lt;your client private key&gt;
Address = 10.0.0.2/32
# if you have multi client across different devices, use different address here like:
# 10.0.0.3/32, 10.0.0.4/32, etc
[Peer]
PublicKey = &lt;server's public key which is generated in the first step&gt; 
Endpoint = &lt;server's ip&gt;:51820
AllowedIPs = 0.0.0.0/0, ::/0
</code></pre>
<p>Save this <code>wgclient.conf</code> file, for MacOS and Windows user, click &quot;Add Tunnel&quot; &gt; &quot;Add Tunnel from existing config file&quot;, then select this config file. After this, configuration on the client side are all set.</p>
<h2 id="3-add-client-to-server">3, Add client to server</h2>
<p>Now we have client's private key and public key, it is time to add the client public key to server. Back to our <code>/etc/wireguard/wg0.conf</code> file in server side, then add:</p>
<pre><code>[Peer]
# client 1
PublicKey = &lt;client1's public key&gt;
AllowedIPs = 10.0.0.2/32

[Peer]
# client 2
PublicKey = &lt;client2's public key&gt;
AllowedIPs = 10.0.0.3/32
</code></pre>
<p>Now activate the wireguard in server side:</p>
<pre><code class="language-bash"># activate
$ wg-quick up wg0
# to deactivate it, run:
# $ wg-quick down wg0
</code></pre>
<h2 id="4-connect-client-to-server">4, Connect client to server</h2>
<p>For MacOS and Windows user, since we have added the configuration file in step 2, all you need to do is click the &quot;activate&quot; button. For Ubuntu user, just run <code>wg-quick up wgclient</code>. Once done, your client peer should be now connected to the server peer.</p>
<p>On server side you can run <code>wg show</code> to check the connected peers status.</p>
<p>To disconnect it, MacOS and Windows user can just click the &quot;deactivate&quot; button. Ubuntu user can run <code>wg-quick down wgclient</code>.</p>
<h2 id="others">Others</h2>
<p>1, To make wireguard auto run on system boot, run:</p>
<pre><code class="language-bash">sudo systemctl enable wg-quick@wg0
</code></pre>
<p>2, If you have some website running in your VPN server and you want to access it with wireguard VPN connected, the access IP now will be the private IP (e.g. 10.0.0.2, 10.0.0.3). If you website have an IP whitelist, you need to list those IPs as well. For example, in Nginx, you can add:</p>
<pre><code>allow 10.0.0.1;
allow 10.0.0.2;
</code></pre>
<p>You can also add a range, e.g. if you want to allow 10.0.0.1 to 10.0.0.19, a &quot;IP to CIDR&quot; address tool can help: <a href="https://www.ipaddressguide.com/cidr#range">https://www.ipaddressguide.com/cidr#range</a>. For example, for IP range 10.0.0.1 to 10.0.0.19, you can add <code>allow</code> like this:</p>
<pre><code>allow 10.0.0.1/32;
allow 10.0.0.2/31;
allow 10.0.0.4/30;
allow 10.0.0.8/29;
allow 10.0.0.16/30;
</code></pre>
<h2 id="reference">Reference</h2>
<ol>
<li><a href="https://www.linode.com/docs/networking/vpn/set-up-wireguard-vpn-on-ubuntu/">https://www.linode.com/docs/networking/vpn/set-up-wireguard-vpn-on-ubuntu/</a></li>
<li><a href="https://tau.gr/posts/2019-03-02-set-up-wireguard-vpn-ubuntu-mac/">https://tau.gr/posts/2019-03-02-set-up-wireguard-vpn-ubuntu-mac/</a></li>
<li><a href="https://gist.github.com/chrisswanda/88ade75fc463dcf964c6411d1e9b20f4">https://gist.github.com/chrisswanda/88ade75fc463dcf964c6411d1e9b20f4</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[rocket.chat server stopped on an update]]></title>
        <id>https://bofeng.github.io/post/rocketchat-server-stopped-on-an-update/</id>
        <link href="https://bofeng.github.io/post/rocketchat-server-stopped-on-an-update/">
        </link>
        <updated>2020-05-12T10:33:01.000Z</updated>
        <content type="html"><![CDATA[<p>Today our self-hosted rocket.chat server suddenly stopped running, and it turns out I am not the only one <a href="https://forums.rocket.chat/t/sudden-502-error/6914">experiencing this problem</a></p>
<p>When I check the server, use the command to check status of rocketchat server and its mongo:</p>
<pre><code class="language-bash">$ service snap.rocketchat-server.rocketchat-server status
# this shows mongodb cannot be connected
$ service snap.rocketchat-server.rocketchat-mongo status
# this shows mongdb is not running
</code></pre>
<p>So apparently there is something wrong with MongoDB. When I check the mongo start log with command:</p>
<pre><code class="language-bash">journalctl -u snap.rocketchat-server.rocketchat-mongo
</code></pre>
<p>There are some errors about the versioning:</p>
<blockquote>
<p>[initandlisten] WiredTiger error (-31802) [1589310297:583337][24694:0x7fbd44f65d00], txn-recover: unsupported WiredTiger file version: this build  only supports major/minor versions up to 1/0,  and the file is version 2/0: WT_ERROR: non-specific WiredTiger error</p>
</blockquote>
<p>It turns out snap did an update to our rocket.chat server, and updated it to the new version, which now runnign mongodb version 3.6 and changed some database files. Now the database files cannot be run under mongo3.4 anymore (which rocket.server needs).</p>
<p>So I followed this method <a href="https://forums.rocket.chat/t/suddenly-mongod-is-not-starting/4983/2">here</a>:</p>
<ol>
<li>Download version 3.6 in mongodb's website</li>
<li>cd to version 3.6 bin: <code>./mongod --dbpath /var/snap/rocketchat-server/common/</code></li>
<li>in the same 3.6 bin folder, use mongo connect to the server: <code>./mongo</code></li>
<li>now is the key part, run commnad: <code>db.adminCommand( { setFeatureCompatibilityVersion: “3.4” } )</code></li>
<li>exit both above mongo and mongod</li>
<li>cd to <code>/snap/rocketchat-server/current/bin</code></li>
<li>run <code>./mongod --repair --dbpath /var/snap/rocketchat-server/common/</code></li>
<li>once it is done, try start rocketchat-mongo: <code>service snap.rocketchat-server.rocketchat-mongo start</code>, then check its status again: <code>service snap.rocketchat-server.rocketchat-mongo status</code>, it should be running now.</li>
</ol>
<p>The MongoDB is running, but when I use:</p>
<pre><code class="language-bash">service snap.rocketchat-server.rocketchat-server start
</code></pre>
<p>to start the rocket.chat server, it still doesn't work. By checking its log:</p>
<pre><code class="language-bash">journalctl -u snap.rocketchat-server.rocketchat-server
</code></pre>
<p>Found there is a line:</p>
<blockquote>
<p>fs.js:646<br>
return binding.open(pathModule._makeLong(path), stringToFlags(flags), mode);<br>
^<br>
Error: ENOENT: no such file or directory, open '/snap/rocketchat-server/1436/star.json'</p>
</blockquote>
<p>When I cd to <code>/snap/rocketchat-server/1436/</code> folder, there is no &quot;star.json&quot; file. But the old version 1427 has it: <code>/snap/rocketchat-server/1427/</code></p>
<p>So I guess there is an error in this new version, have to roll it back to previous version and forbid it to update the latest version:</p>
<pre><code class="language-bash">$ snap revert --revision=1427 rocketchat-server
$ snap run --shell rocketchat-server
$ snapctl get snap-refreshing #which returned &quot;true&quot;
$ snapctl set snap-refreshing=false
</code></pre>
<p>Now start the server again:</p>
<pre><code class="language-bash">$ service snap.rocketchat-server.rocketchat-server start
</code></pre>
<p>check the status:</p>
<pre><code class="language-bash">$ service snap.rocketchat-server.rocketchat-server status
</code></pre>
<p>Now it works!!! after spending several hours on this ... what a fun day 😄</p>
<h3 id="reference">Reference:</h3>
<ul>
<li><a href="https://rocket.chat/docs/installation/manual-installation/ubuntu/snaps/">https://rocket.chat/docs/installation/manual-installation/ubuntu/snaps/</a></li>
<li><a href="https://forums.rocket.chat/t/snap-2-1-update-issues/5019">https://forums.rocket.chat/t/snap-2-1-update-issues/5019</a></li>
<li><a href="https://forums.rocket.chat/t/suddenly-mongod-is-not-starting/4983/2">https://forums.rocket.chat/t/suddenly-mongod-is-not-starting/4983/2</a></li>
<li><a href="https://forums.rocket.chat/t/sudden-502-error/6914/10">https://forums.rocket.chat/t/sudden-502-error/6914/10</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Copy file content to clipboard in terminal]]></title>
        <id>https://bofeng.github.io/post/copy-file-content-to-clipboard-in-terminal/</id>
        <link href="https://bofeng.github.io/post/copy-file-content-to-clipboard-in-terminal/">
        </link>
        <updated>2020-04-19T11:45:32.000Z</updated>
        <content type="html"><![CDATA[<p>In Mac you can use <code>pbcopy</code>:</p>
<pre><code class="language-bash">$ pbcopy &lt; hello.txt
</code></pre>
<p>In Linux which is using X11 (I am using ubuntu), you can use <code>xsel</code> command:</p>
<pre><code class="language-bash">$ sudo apt install xsel
$ xsel -b &lt; hello.txt
</code></pre>
<p>To copy some program's output to clipboard, we can use pipe:</p>
<pre><code class="language-bash">$ date | sel -b
</code></pre>
<p>Then if you use &quot;ctrl-v&quot;, you will see the copied date.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to add "startpage" as default search engine in Firefox?]]></title>
        <id>https://bofeng.github.io/post/how-to-add-startpage-as-default-search-engine-in-firefox/</id>
        <link href="https://bofeng.github.io/post/how-to-add-startpage-as-default-search-engine-in-firefox/">
        </link>
        <updated>2020-04-18T13:58:07.000Z</updated>
        <content type="html"><![CDATA[<p><a href="startpage.com">StartPage</a> is a search engine will proxy your search to Google but without giving your data to it. In another word, it can give you the same result as Google but protect your privacy.</p>
<p>It is really easy o make it as your default search engine in the address bar in Firefox. If you open the &quot;Perference&quot; in Firefox, and on the &quot;search&quot; part you will see a search engine list similar to this:</p>
<figure data-type="image" tabindex="1"><img src="https://bofeng.github.io/post-images/1587261660967.png" alt="" loading="lazy"></figure>
<p>So there is no &quot;Start Page&quot; there. You can now go to &quot;startpage.com&quot;, then on the right of the address bar, click the &quot;dot dot dot&quot; to see more options, from where you can see &quot;Add Search Engine&quot; option, simply click it.</p>
<figure data-type="image" tabindex="2"><img src="https://bofeng.github.io/post-images/1587261742628.png" alt="" loading="lazy"></figure>
<p>Now go back to the &quot;Preference&quot; page, in the &quot;search engine&quot; dropdown list, you can select &quot;Start Page&quot; as your default search engine. Next time, when you type some keyword in the address bar, Firefox will auto do the search in Start Page.</p>
<figure data-type="image" tabindex="3"><img src="https://bofeng.github.io/post-images/1587261981425.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why there is no "gets" function in C standard library?]]></title>
        <id>https://bofeng.github.io/post/why-there-is-no-gets-function-in-c-standard-library/</id>
        <link href="https://bofeng.github.io/post/why-there-is-no-gets-function-in-c-standard-library/">
        </link>
        <updated>2020-04-18T08:39:49.000Z</updated>
        <content type="html"><![CDATA[<p>If you are new to learn C program, you may find there are many functions like &quot;getc&quot;, &quot;putc&quot;, &quot;getchar&quot;, &quot;putchar&quot;, &quot;fgets&quot;, &quot;fputs&quot; : every &quot;put&quot; function comes with a corresponding &quot;get&quot; function. But there is a &quot;puts&quot; function while no &quot;gets&quot; function. Why?</p>
<p>Well, the short anwer is, the &quot;gets&quot; function was there before in C89 standard, then it got deprecated in C99 and removed in C11. But let's see why it got removed.</p>
<p>First let's check the function's declaration:</p>
<pre><code class="language-c">char* gets(char* str)
</code></pre>
<p>Basically we pass a pre-allocated &quot;str&quot; buffer to this function, <code>gets</code> will get user's input and save it into this buffer. So we can write some code like this:</p>
<pre><code class="language-c">char buffer[20] = {0};
gets(buffer);
printf(&quot;Your input is: %s\n&quot;, buffer);
</code></pre>
<p>If we use <code>gcc</code> to compile the code, we can see the error something like this:</p>
<blockquote>
<p>main.c:(.text+0x164): warning: the 'gets' function is dangerous and should not be used.</p>
</blockquote>
<p>We can see using this function is <strong>dangerous</strong>, but if we ignore this warning and go ahead run our program: if we type &quot;hello world&quot; as our input, the program can correctly put this string out.</p>
<p>So why is it dangerous? In our program we allocated a char array which has 20 slots, and our input &quot;hello world&quot; which are 11 characters, will be saved inside this array from position 0. Our &quot;hello world&quot; case works well, but now imagine what if our input has more than 20 characters, then we won't have enough space to save all of these characters:</p>
<pre><code class="language-bash">$ ./main
hello world hello world hello world
Your input is: hello world hello world hello world
*** stack smashing detected ***: &lt;unknown&gt; terminated
Aborted (core dumped)
</code></pre>
<p>In this case, since we don't have enough space to save user's input, the program crashed.</p>
<p>Sometimes this may cause bug that harder to find, suppose we have code like this:</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main() {
    char c = 'c';
    char arr[10] = {0};
    printf(&quot;before gets: variable c is %c\n&quot;, c);
    gets(arr);
    printf(&quot;after gets: variable c is %c\n&quot;, c);
    return 0;
}
</code></pre>
<p>Before we compile and run the code, guess what the output would be if in the <code>gets</code> step, we type &quot;hello world&quot;.</p>
<p>Your guess might be the program will crash since &quot;hello world&quot; in total are 11 characters (including the white-space in the middel) but our allocated <code>arr</code> only have 10 slots. Well, you are not wrong with the <strong>modern compiler</strong>, by that I mean, if we compile the code and run it:</p>
<pre><code class="language-bash">$ gcc main.c -o main
main.c:(.text+0x51): warning: the 'gets' function is dangerous and should not be used.
$ ./main
before gets: variable c is c
hello world
after gets: variable c is c
*** stack smashing detected ***: &lt;unknown&gt; terminated
Aborted (core dumped)
</code></pre>
<p>But in the old compiler, you might won't have this crashed. The modern <code>gcc</code> will compile with a default &quot;stack-protector&quot; turned on. Let's try to turn it off then run again:</p>
<pre><code class="language-bash">$ gcc main.c -fno-stack-protector -o main
main.c:(.text+0x42): warning: the 'gets' function is dangerous and should not be used.
$ ./main
before gets: variable c is c
hello world
after gets: variable c is d
</code></pre>
<p>Ah, this time the program doesn't crash. But our variable 'c' which is declared before <code>arr</code> has been &quot;magically&quot; changed to the character 'd', which is the last letter in &quot;world&quot;.</p>
<p>To understand this, we need to know how the program allocate spaces in stack. Most of the operating system will allocate stack from high address to low address. The stack in our program will be something like this:<br>
<img src="https://bofeng.github.io/post-images/1587244468586.png" alt="" loading="lazy"></p>
<p>When we input &quot;hello world&quot;, program will try to save this string from <code>arr[0]</code>, like this:<br>
<img src="https://bofeng.github.io/post-images/1587244621171.png" alt="" loading="lazy"></p>
<p>So technically we still have 11 slots, but the last one is not for our array, it is the space for our variable <code>c</code>. When the program saved the whole string, it put the last letter 'd' in our <code>char c</code> slot - that's why after input our varaible <code>c</code> has been modified to <code>d</code> ! This kind bug is quite dangerous and not easy to find!</p>
<h3 id="the-solution">The solution</h3>
<p>The alternative function we should use is <code>fgets</code>:</p>
<pre><code class="language-c">char* fgets(char *string, int length, FILE * stream);
</code></pre>
<p>So we can change our code to:</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main() {
    char c = 'c';
    char arr[10] = {0};
    printf(&quot;before gets: variable c is %c\n&quot;, c);
    fgets(arr, 10, stdin);
    printf(&quot;after gets: variable c is %c\n&quot;, c);
    return 0;
}
</code></pre>
<p>Use <code>gcc</code> to compile and run it:</p>
<pre><code class="language-bash">$ gcc main.c -o main
$ ./main
before gets: variable c is c
hello world
after gets: variable c is c
</code></pre>
<p>Two things changed here: 1) when compile, there is no warning info printed out 2) although our &quot;hello world&quot; contains 11 letters, our program didn't crash anymore and our variable <code>c</code> hadn't been overwritten.</p>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/1345670/stack-smashing-detected">stack smashing detected</a></li>
<li><a href="https://en.wikipedia.org/wiki/C_file_input/output#gets">gets is deprecated in c99</a></li>
<li><a href="https://en.wikibooks.org/wiki/C_Programming/stdio.h/fgets">fgets function</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gnome display settings enable multiple scales]]></title>
        <id>https://bofeng.github.io/post/gnome-display-settings-enable-multiple-scales/</id>
        <link href="https://bofeng.github.io/post/gnome-display-settings-enable-multiple-scales/">
        </link>
        <updated>2020-04-16T21:18:15.000Z</updated>
        <content type="html"><![CDATA[<p>I was settings up my new System76 laptop (my current Pop!_OS version is based on ubuntu 19.10), the default 1920x1680 resolution is too small for me in the display settings. So I want to make it bigger. There is a &quot;Scale&quot; settings below, and it only has 2 options: 100%, 200%</p>
<p>100% is too small for me, 200% is too big.</p>
<p>To enable other scales, open terminal run command:</p>
<pre><code class="language-bash">$ gsettings set org.gnome.mutter experimental-features &quot;['x11-randr-fractional-scaling']&quot;
</code></pre>
<p>Then back to display settings, you will be able to see other scale values: 125%, 150% and 175%.</p>
<figure data-type="image" tabindex="1"><img src="https://bofeng.github.io/post-images/1587158852197.png" alt="" loading="lazy"></figure>
<h3 id="reference">Reference:</h3>
<ul>
<li><a href="https://www.linuxuprising.com/2019/04/how-to-enable-hidpi-fractional-scaling.html">https://www.linuxuprising.com/2019/04/how-to-enable-hidpi-fractional-scaling.html</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Array and Pointer in C]]></title>
        <id>https://bofeng.github.io/post/array-and-pointer-in-c/</id>
        <link href="https://bofeng.github.io/post/array-and-pointer-in-c/">
        </link>
        <updated>2020-04-05T03:01:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="array-is-and-is-not-a-pointer">Array is and is not a pointer</h3>
<p>Is array a pointer in C? seems we can treat it as a pointer when we access its element. But sometimes Array has different behavior from pointer.</p>
<p>Take this for example:</p>
<pre><code class="language-c">int main() {
    int arr[10] = {0};
    printf(&quot;size: %ld&quot;, sizeof(arr));
    return 0;
}
</code></pre>
<p>If <code>arr</code> here is a pointer, then seems this should print out the size of a pointer (4 or 8, depends on the Operating System), but if we compile this code, it prints out 40, so clearly it is <code>sizeof(int) * 10</code>.</p>
<p>I like the quote here:</p>
<blockquote>
<p>The first step to learning C is understanding that pointers and arrays are the same thing. The second step is understanding that pointers and arrays are different.</p>
</blockquote>
<h3 id="pass-array-as-parameter-to-function">Pass array as parameter to function</h3>
<p>Ok, from this <code>sizeof</code> at least we know they are different, but how do we explain this:</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void func(int arr[]) {
    size_t size = sizeof(arr);
    printf(&quot;Inside func: %ld\n&quot;, size);
}

int main() {
    int arr[10] = {0};
    size_t size = sizeof(arr);
    printf(&quot;Inside main: %ld\n&quot;, size);
    func(arr);
    return 0;
}
</code></pre>
<p>We passed <code>arr</code> as parameter to function <code>func</code>, if we compile and run this program, it prints out:</p>
<pre><code>Inside main: 40
Inside func: 8
</code></pre>
<p>Well, although we set the parameter type to be <code>arr[]</code> in function <code>func</code>, but inside the function, <code>arr</code> behaves like a pointer now (it prints 8, instead of 40). So what's the magic here? we call the same <code>sizeof</code> function, why inside main function it prints out 40, and inside <code>func</code>, it prints 8?</p>
<p>This problem bothered me for a while, I decide to check the generate assembly code to see what's the difference for these 2 <code>sizeof</code> call.</p>
<pre><code class="language-bash">$ gcc -S -fverbose-asm main.c
</code></pre>
<p>A file <code>main.s</code> is generated, open this file, first let's check the <code>sizeof</code> inside main function:</p>
<pre><code class="language-assembly"># main.c:10:     int arr[10] = {0};
    movq    $0, -48(%rbp)   #, arr
    movq    $0, -40(%rbp)   #, arr
    movq    $0, -32(%rbp)   #, arr
    movq    $0, -24(%rbp)   #, arr
    movq    $0, -16(%rbp)   #, arr
# main.c:11:     size_t size = sizeof(arr);
    movq    $40, -56(%rbp)  #, size
</code></pre>
<p>Here the <code>movq</code> is move 8 bytes command. We can see after we defined <code>arr</code>, it first moved 8 bytes for 5 times from the <code>arr</code> address, then for our <code>sizeof</code> call, the compiler immediately set the size to be 40. Ha, so this size would be already set during the compile time, not at run time! The compiler knows <code>arr</code> here is an array's base address, it knows the array's size.</p>
<p>But the <code>sizeof</code> call in <code>func</code> function gave us 8, its assembly code:</p>
<pre><code class="language-assembly">    movq    %rdi, -24(%rbp) # arr, arr
# main.c:5:     size_t size = sizeof(arr);
    movq    $8, -8(%rbp)    #, size
</code></pre>
<p>We can see here, compiler directly put 8 to the <code>size</code> variable. The reason is when we pass an array to a function, it will be downgraded to a pointer, so although we write the funcion to be <code>func(int arr[])</code>, when we pass the <code>arr</code> to this function, compiler will treat it as <code>func(int* arr)</code>.</p>
<p>But it seems weird to me: the compiler should be definitely smart enough to track the passed parameter and can tell it is an array. The only reasonable explanation I found is the &quot;historical&quot; reason:</p>
<blockquote>
<p>The only purpose of this rule is to maintain backwards compatibility with historical compilers that did not support passing aggregate values as function arguments.</p>
</blockquote>
<p>But anyway, if the C standard says so, ok, at leaset we know when pass array as parameter, it is a pointer. So inside the function, if we want to know how many elements that array contains, we cann't use <code>sizeof(arr)/sizeof(arr[0])</code> any more, because <code>sizeof(arr</code>) will just give us the size of a pointer.</p>
<p>So in the <code>func</code> function, how do we tell the array's size? An obvious way is we can pass another length paramter to tell this <code>func</code> the array length.</p>
<pre><code class="language-c">void func(int arr[], int len) {
   // ...
}
</code></pre>
<p>Or we use the array's address as the paramter :</p>
<pre><code class="language-c">void func2(int (*arr)[10]) {
    size_t size = sizeof(*arr);
    printf(&quot;Inside func2: %ld\n&quot;, size);
}
</code></pre>
<p>If in our <code>main</code> function, we call this <code>func2</code> as <code>func2(&amp;arr);</code>, it will print <code>Inside func2: 40</code>.</p>
<p>For our <code>func2</code> function, we write a fixed length 10 there. If we want the same trick works for variable length array, we could define the function like this:</p>
<pre><code class="language-c">void func3(int n, int (*arr)[n]) {
    size_t size = sizeof(*arr);
    printf(&quot;Inside func3: %ld\n&quot;, size);
}
</code></pre>
<p>Then call it like <code>func3(10, &amp;arr)</code>, it will also print out the size to be 40.</p>
<h3 id="variable-length-array-vla">Variable Length Array  (VLA)</h3>
<p>In the above example, we defined a fixed length array, and when compiler sees <code>sizeof</code>, it immidiately know the size. But what if the array's length is determined at the run time? Say if we have code:</p>
<pre><code class="language-c">int main() {}
    int len = 0;
    scanf(&quot;%d&quot;, &amp;len);
    int arr2[len];
    size = sizeof(arr2);
    printf(&quot;arr2 size: %ld\n&quot;, size);
    return 0;
}
</code></pre>
<p>Here we take the length from user input, can compiler output the right array size in this case? or it will just treat the array as a pointer now?</p>
<p>If we try it: we type 10 as the length, it prints arr2 size: 40; we type 20 as the length, it prints arr2 size: 80. So although the size determined during run time, the compiler still has a way to tell use the correct size.</p>
<p>If we check the generated assembly code, this time the compiler generated much more than the fixed length:</p>
<pre><code class="language-assembly"># main.c:17:     int arr2[len];
    movl    -124(%rbp), %ecx    # len, len.0_19
# main.c:17:     int arr2[len];
    movslq  %ecx, %rax  # len.0_19, _1
    subq    $1, %rax    #, _2
    movq    %rax, -112(%rbp)    # _2, D.2335
    movslq  %ecx, %rax  # len.0_19, _4
    movq    %rax, %r14  # _4, _5
    movl    $0, %r15d   #, _5
    movslq  %ecx, %rax  # len.0_19, _9
    movq    %rax, %r12  # _9, _10
    movl    $0, %r13d   #, _10
    movslq  %ecx, %rax  # len.0_19, _12
    leaq    0(,%rax,4), %rdx    #, _24
    movl    $16, %eax   #, tmp122
    subq    $1, %rax    #, tmp103
    addq    %rdx, %rax  # _24, tmp104
    movl    $16, %edi   #, tmp123
    movl    $0, %edx    #, tmp107
    divq    %rdi    # tmp123
    imulq   $16, %rax, %rax #, tmp106, tmp108
    movq    %rax, %rdx  # tmp108, tmp110
    andq    $-4096, %rdx    #, tmp110
    movq    %rsp, %rsi  #, tmp111
    subq    %rdx, %rsi  # tmp110, tmp111
    movq    %rsi, %rdx  # tmp111, tmp111
.L3:
    cmpq    %rdx, %rsp  # tmp111,
    je  .L4 #,
    subq    $4096, %rsp #,
    orq $0, 4088(%rsp)  #,
    jmp .L3 #
.L4:
    movq    %rax, %rdx  # tmp108, tmp112
    andl    $4095, %edx #, tmp112
    subq    %rdx, %rsp  # tmp112,
    movq    %rax, %rdx  # tmp108, tmp113
    andl    $4095, %edx #, tmp113
    testq   %rdx, %rdx  # tmp113
    je  .L5 #,
    andl    $4095, %eax #, tmp114
    subq    $8, %rax    #, tmp114
    addq    %rsp, %rax  #, tmp115
    orq $0, (%rax)  #,
.L5:
    movq    %rsp, %rax  #, tmp109
    addq    $3, %rax    #, tmp116
    shrq    $2, %rax    #, tmp117
    salq    $2, %rax    #, tmp118
    movq    %rax, -104(%rbp)    # tmp118, arr2.1
# main.c:18:     size = sizeof(arr2);
    movslq  %ecx, %rax  # len.0_19, _14
# main.c:18:     size = sizeof(arr2);
    salq    $2, %rax    #, tmp119
    movq    %rax, -120(%rbp)    # tmp119, size
</code></pre>
<p>We won't dive into details for this code (to see the explanation, you can <a href="https://stackoverflow.com/questions/10078283/how-sizeofarray-works-at-runtime">check it here</a>), but we can see for VLA, <code>sizeof</code> can still correctly evaluate the array size in run time..</p>
<h3 id="malloc-and-free">malloc and free</h3>
<p>Another question is, we know if we allocate some memory using <code>malloc</code>, and when we free the memory with the <code>free</code> function, we never pass a second parameter to tell the size (how many memory needs to be free'ed), how does the compiler know that?</p>
<p>The magic is behind the <code>malloc</code> function, for example, when we call the <code>p = malloc(10)</code> function, although it returns us the address for 10 bytes, under the hood, it will allocate more to keep some meta data like the size. For example, a simplest method could be, it allocate 4 bytes + 10 bytes where the first 4 bytes is used to save the size 10, then it returns the memory address starts from the 10 bytes. Later when we call the <code>free(p)</code> function, <code>free</code> can first use p - 4 bytes to read what the size is, then do a proper delete.</p>
<h3 id="takeaways">Takeaways</h3>
<ol>
<li>array and pointer are different</li>
<li>when pass an array as parameter to function, it decays to pointer</li>
<li>we can pass a array pointer as parameter to keep it behaves as an array instead of a pointer</li>
<li>even array's length is determined during the run time, sizeof can still print out correct size</li>
<li>malloc function will allocate more to save the size info such that later the free function can get the correct size to free</li>
</ol>
<h3 id="reference">Reference:</h3>
<ol>
<li><a href="https://www.quora.com/Why-doesn%E2%80%99t-sizeof-a-sizeof-a-0-work-for-an-array-passed-as-a-parameter">https://www.quora.com/Why-doesn%E2%80%99t-sizeof-a-sizeof-a-0-work-for-an-array-passed-as-a-parameter</a></li>
<li><a href="https://stackoverflow.com/questions/851958/where-do-malloc-and-free-store-allocated-sizes-and-addresses">https://stackoverflow.com/questions/851958/where-do-malloc-and-free-store-allocated-sizes-and-addresses</a></li>
<li><a href="https://stackoverflow.com/questions/10078283/how-sizeofarray-works-at-runtime">https://stackoverflow.com/questions/10078283/how-sizeofarray-works-at-runtime</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Initialize C Structure]]></title>
        <id>https://bofeng.github.io/post/initialize-c-structure/</id>
        <link href="https://bofeng.github.io/post/initialize-c-structure/">
        </link>
        <updated>2020-04-03T17:15:54.000Z</updated>
        <content type="html"><![CDATA[<p>Define C structure and initialize it.</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

typedef struct _date {
    int year;
    int month;
    int day;
} Date;


typedef struct _time {
    int hour;
    int minute;
    int second;
} Time;

typedef struct _datetime {
    Date date;
    Time time;
} Datetime;


void print_date(Date date) {
    printf(&quot;Year: %d, Month: %d, Day: %d\n&quot;, date.year, date.month, date.day);
}

void print_datetime(Datetime dt) {
    printf(&quot;%d-%d-%d %d:%d:%d\n&quot;, 
           dt.date.year, dt.date.month, dt.date.day,
           dt.time.hour, dt.time.minute, dt.time.second);
}


int main() {
    Date today = {2020, 4, 4};
    Date tomorrow = {.year=2020, .month=4, .day=5};

    print_date(today);
    print_date(tomorrow);

    today = (Date) {2020, 4, 3};
    print_date(today);

    Datetime now = {
        {2020, 4, 4},
        {.hour=13, .minute=37, .second=40}
    };
    print_datetime(now);

    return 0;
}
</code></pre>
<p>Compile and run:</p>
<pre><code>Year: 2020, Month: 4, Day: 4
Year: 2020, Month: 4, Day: 5
Year: 2020, Month: 4, Day: 3
2020-4-4 13:37:40
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Back Pressure]]></title>
        <id>https://bofeng.github.io/post/back-pressure/</id>
        <link href="https://bofeng.github.io/post/back-pressure/">
        </link>
        <updated>2020-02-23T05:17:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="resources">Resources:</h2>
<p>1, <a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7">Backpressure explained — the resisted flow of data through software</a></p>
<p>2, Flask Author: <a href="https://lucumr.pocoo.org/2020/1/1/async-pressure/">I'm not feeling the async pressure</a></p>
<p>3, Answer from Starlette author: <a href="https://github.com/encode/starlette/issues/802#issuecomment-574606003">Back pressure?</a> :</p>
<blockquote>
<p>However network backpressure isn't actually the only thing we'd like to have in place here. We also want to ensure resource limiting at any potential bottlenecks. The most notable case here would be the number of available database connections.</p>
<p>Uvicorn currently allows you to set a --limit-concurrency <int> which hard-limits the maximum number of allowable tasks which may be running before 503's will be returned. In the most constrained case you could just set this based on the number of available database connections.</p>
</blockquote>
<p>4, Answer from FastAPI: <a href="https://github.com/tiangolo/fastapi/issues/857">Back pressure?</a> :</p>
<blockquote>
<p>the author of starlette has been aware of this issue for (at least) going on two years so I don't think there is any reason to panic<br>
... in practice you can usually prevent backpressure issues by just using a rate-limiting load balancer and a good auto-scaling policy. This won't handle all cases, and won't save you from particularly bad design choices, but for 99% of deployed python applications this would already be overkill.</p>
</blockquote>
<p>5, <a href="https://stackoverflow.com/questions/54454841/performance-decrease-when-using-nginx-as-reverse-proxy-for-sanic-gunicorn">Use sanic with Nginx</a></p>
<blockquote>
<p>Normally, nginx is supposed to control the backpressure for your backend ...</p>
</blockquote>
<p>6, <a href="https://pymongo.readthedocs.io/en/3.10.0/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient">Pymongo's connection pool size</a></p>
<blockquote>
<p>maxPoolSize (optional): The maximum allowable number of concurrent connections to each connected server. Requests to a server will block if there are maxPoolSize outstanding connections to the requested server. Defaults to 100. Cannot be 0.</p>
</blockquote>
]]></content>
    </entry>
</feed>