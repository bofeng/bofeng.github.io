<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bofeng.github.io</id>
    <title>0xBF</title>
    <updated>2020-04-18T21:48:17.037Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bofeng.github.io"/>
    <link rel="self" href="https://bofeng.github.io/atom.xml"/>
    <logo>https://bofeng.github.io/images/avatar.png</logo>
    <icon>https://bofeng.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 0xBF</rights>
    <entry>
        <title type="html"><![CDATA[Why there is no "gets" function in C standard library?]]></title>
        <id>https://bofeng.github.io/post/why-there-is-no-gets-function-in-c-standard-library/</id>
        <link href="https://bofeng.github.io/post/why-there-is-no-gets-function-in-c-standard-library/">
        </link>
        <updated>2020-04-17T08:39:49.000Z</updated>
        <content type="html"><![CDATA[<p>If you are new to learn C program, you may find there are many functions like &quot;getc&quot;, &quot;putc&quot;, &quot;getchar&quot;, &quot;putchar&quot;, &quot;fgets&quot;, &quot;fputs&quot; : every &quot;put&quot; function comes with a corresponding &quot;get&quot; function. But there is a &quot;puts&quot; function while no &quot;gets&quot; function. Why?</p>
<p>Well, the short anwer is, the &quot;gets&quot; function was there before in C89 standard, then it got deprecated in C99 and removed in C11. But let's see why it got removed.</p>
<p>First let's check the function's declaration:</p>
<pre><code class="language-c">char* gets(char* str)
</code></pre>
<p>Basically we pass a pre-allocated &quot;str&quot; buffer to this function, <code>gets</code> will get user's input and save it into this buffer. So we can write some code like this:</p>
<pre><code class="language-c">char buffer[20] = {0};
gets(buffer);
printf(&quot;Your input is: %s\n&quot;, buffer);
</code></pre>
<p>If we use <code>gcc</code> to compile the code, we can see the error something like this:</p>
<blockquote>
<p>main.c:(.text+0x164): warning: the 'gets' function is dangerous and should not be used.</p>
</blockquote>
<p>We can see using this function is <strong>dangerous</strong>, but if we ignore this warning and go ahead run our program: if we type &quot;hello world&quot; as our input, the program can correctly put this string out.</p>
<p>So why is it dangerous? In our program we allocated a char array which has 20 slots, and our input &quot;hello world&quot; which are 11 characters, will be saved inside this array from position 0. Our &quot;hello world&quot; case works well, but now imagine what if our input has more than 20 characters, then we won't have enough space to save all of these characters:</p>
<pre><code class="language-bash">$ ./main
hello world hello world hello world
Your input is: hello world hello world hello world
*** stack smashing detected ***: &lt;unknown&gt; terminated
Aborted (core dumped)
</code></pre>
<p>In this case, since we don't have enough space to save user's input, the program crashed.</p>
<p>Sometimes this may cause bug that harder to find, suppose we have code like this:</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main() {
    char c = 'c';
    char arr[10] = {0};
    printf(&quot;before gets: variable c is %c\n&quot;, c);
    gets(arr);
    printf(&quot;after gets: variable c is %c\n&quot;, c);
    return 0;
}
</code></pre>
<p>Before we compile and run the code, guess what the output would be if in the <code>gets</code> step, we type &quot;hello world&quot;.</p>
<p>Your guess might be the program will crash since &quot;hello world&quot; in total are 11 characters (including the white-space in the middel) but our allocated <code>arr</code> only have 10 slots. Well, you are not wrong with the <strong>modern compiler</strong>, by that I mean, if we compile the code and run it:</p>
<pre><code class="language-bash">$ gcc main.c -o main
main.c:(.text+0x51): warning: the 'gets' function is dangerous and should not be used.
$ ./main
before gets: variable c is c
hello world
after gets: variable c is c
*** stack smashing detected ***: &lt;unknown&gt; terminated
Aborted (core dumped)
</code></pre>
<p>But in the old compiler, you might won't have this crashed. The modern <code>gcc</code> will compile with a default &quot;stack-protector&quot; turned on. Let's try to turn it off then run again:</p>
<pre><code class="language-bash">$ gcc main.c -fno-stack-protector -o main
main.c:(.text+0x42): warning: the 'gets' function is dangerous and should not be used.
$ ./main
before gets: variable c is c
hello world
after gets: variable c is d
</code></pre>
<p>Ah, this time the program doesn't crash. But our variable 'c' which is declared before <code>arr</code> has been &quot;magically&quot; changed to the character 'd', which is the last letter in &quot;world&quot;.</p>
<p>To understand this, we need to know how the program allocate spaces in stack. Most of the operating system will allocate stack from high address to low address. The stack in our program will be something like this:<br>
<img src="https://bofeng.github.io/post-images/1587244468586.png" alt="" loading="lazy"></p>
<p>When we input &quot;hello world&quot;, program will try to save this string from <code>arr[0]</code>, like this:<br>
<img src="https://bofeng.github.io/post-images/1587244621171.png" alt="" loading="lazy"></p>
<p>So technically we still have 11 slots, but the last one is not for our array, it is the space for our variable <code>c</code>. When the program saved the whole string, it put the last letter 'd' in our <code>char c</code> slot - that's why after input our varaible <code>c</code> has been modified to <code>d</code> ! This kind bug is quite dangerous and not easy to find!</p>
<h3 id="the-solution">The solution</h3>
<p>The alternative function we should use is <code>fgets</code>:</p>
<pre><code class="language-c">char* fgets(char *string, int length, FILE * stream);
</code></pre>
<p>So we can change our code to:</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

int main() {
    char c = 'c';
    char arr[10] = {0};
    printf(&quot;before gets: variable c is %c\n&quot;, c);
    fgets(arr, 10, stdin);
    printf(&quot;after gets: variable c is %c\n&quot;, c);
    return 0;
}
</code></pre>
<p>Use <code>gcc</code> to compile and run it:</p>
<pre><code class="language-bash">$ gcc main.c -o main
$ ./main
before gets: variable c is c
hello world
after gets: variable c is c
</code></pre>
<p>Two things changed here: 1) when compile, there is no warning info printed out 2) although our &quot;hello world&quot; contains 11 letters, our program didn't crash anymore and our variable <code>c</code> hadn't been overwritten.</p>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="https://stackoverflow.com/questions/1345670/stack-smashing-detected">stack smashing detected</a></li>
<li><a href="https://en.wikipedia.org/wiki/C_file_input/output#gets">gets is deprecated in c99</a></li>
<li><a href="https://en.wikibooks.org/wiki/C_Programming/stdio.h/fgets">fgets function</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gnome display settings enable multiple scales]]></title>
        <id>https://bofeng.github.io/post/gnome-display-settings-enable-multiple-scales/</id>
        <link href="https://bofeng.github.io/post/gnome-display-settings-enable-multiple-scales/">
        </link>
        <updated>2020-04-16T21:18:15.000Z</updated>
        <content type="html"><![CDATA[<p>I was settings up my new System76 laptop (my current Pop!_OS version is based on ubuntu 19.10), the default 1920x1680 resolution is too small for me in the display settings. So I want to make it bigger. There is a &quot;Scale&quot; settings below, and it only has 2 options: 100%, 200%</p>
<p>100% is too small for me, 200% is too big.</p>
<p>To enable other scales, open terminal run command:</p>
<pre><code class="language-bash">$ gsettings set org.gnome.mutter experimental-features &quot;['x11-randr-fractional-scaling']&quot;
</code></pre>
<p>Then back to display settings, you will be able to see other scale values: 125%, 150% and 175%.</p>
<figure data-type="image" tabindex="1"><img src="https://bofeng.github.io/post-images/1587158852197.png" alt="" loading="lazy"></figure>
<h3 id="reference">Reference:</h3>
<ul>
<li><a href="https://www.linuxuprising.com/2019/04/how-to-enable-hidpi-fractional-scaling.html">https://www.linuxuprising.com/2019/04/how-to-enable-hidpi-fractional-scaling.html</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Array and Pointer in C]]></title>
        <id>https://bofeng.github.io/post/array-and-pointer-in-c/</id>
        <link href="https://bofeng.github.io/post/array-and-pointer-in-c/">
        </link>
        <updated>2020-04-05T03:01:28.000Z</updated>
        <content type="html"><![CDATA[<h3 id="array-is-and-is-not-a-pointer">Array is and is not a pointer</h3>
<p>Is array a pointer in C? seems we can treat it as a pointer when we access its element. But sometimes Array has different behavior from pointer.</p>
<p>Take this for example:</p>
<pre><code class="language-c">int main() {
    int arr[10] = {0};
    printf(&quot;size: %ld&quot;, sizeof(arr));
    return 0;
}
</code></pre>
<p>If <code>arr</code> here is a pointer, then seems this should print out the size of a pointer (4 or 8, depends on the Operating System), but if we compile this code, it prints out 40, so clearly it is <code>sizeof(int) * 10</code>.</p>
<p>I like the quote here:</p>
<blockquote>
<p>The first step to learning C is understanding that pointers and arrays are the same thing. The second step is understanding that pointers and arrays are different.</p>
</blockquote>
<h3 id="pass-array-as-parameter-to-function">Pass array as parameter to function</h3>
<p>Ok, from this <code>sizeof</code> at least we know they are different, but how do we explain this:</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

void func(int arr[]) {
    size_t size = sizeof(arr);
    printf(&quot;Inside func: %ld\n&quot;, size);
}

int main() {
    int arr[10] = {0};
    size_t size = sizeof(arr);
    printf(&quot;Inside main: %ld\n&quot;, size);
    func(arr);
    return 0;
}
</code></pre>
<p>We passed <code>arr</code> as parameter to function <code>func</code>, if we compile and run this program, it prints out:</p>
<pre><code>Inside main: 40
Inside func: 8
</code></pre>
<p>Well, although we set the parameter type to be <code>arr[]</code> in function <code>func</code>, but inside the function, <code>arr</code> behaves like a pointer now (it prints 8, instead of 40). So what's the magic here? we call the same <code>sizeof</code> function, why inside main function it prints out 40, and inside <code>func</code>, it prints 8?</p>
<p>This problem bothered me for a while, I decide to check the generate assembly code to see what's the difference for these 2 <code>sizeof</code> call.</p>
<pre><code class="language-bash">$ gcc -S -fverbose-asm main.c
</code></pre>
<p>A file <code>main.s</code> is generated, open this file, first let's check the <code>sizeof</code> inside main function:</p>
<pre><code class="language-assembly"># main.c:10:     int arr[10] = {0};
    movq    $0, -48(%rbp)   #, arr
    movq    $0, -40(%rbp)   #, arr
    movq    $0, -32(%rbp)   #, arr
    movq    $0, -24(%rbp)   #, arr
    movq    $0, -16(%rbp)   #, arr
# main.c:11:     size_t size = sizeof(arr);
    movq    $40, -56(%rbp)  #, size
</code></pre>
<p>Here the <code>movq</code> is move 8 bytes command. We can see after we defined <code>arr</code>, it first moved 8 bytes for 5 times from the <code>arr</code> address, then for our <code>sizeof</code> call, the compiler immediately set the size to be 40. Ha, so this size would be already set during the compile time, not at run time! The compiler knows <code>arr</code> here is an array's base address, it knows the array's size.</p>
<p>But the <code>sizeof</code> call in <code>func</code> function gave us 8, its assembly code:</p>
<pre><code class="language-assembly">    movq    %rdi, -24(%rbp) # arr, arr
# main.c:5:     size_t size = sizeof(arr);
    movq    $8, -8(%rbp)    #, size
</code></pre>
<p>We can see here, compiler directly put 8 to the <code>size</code> variable. The reason is when we pass an array to a function, it will be downgraded to a pointer, so although we write the funcion to be <code>func(int arr[])</code>, when we pass the <code>arr</code> to this function, compiler will treat it as <code>func(int* arr)</code>.</p>
<p>But it seems weird to me: the compiler should be definitely smart enough to track the passed parameter and can tell it is an array. The only reasonable explanation I found is the &quot;historical&quot; reason:</p>
<blockquote>
<p>The only purpose of this rule is to maintain backwards compatibility with historical compilers that did not support passing aggregate values as function arguments.</p>
</blockquote>
<p>But anyway, if the C standard says so, ok, at leaset we know when pass array as parameter, it is a pointer. So inside the function, if we want to know how many elements that array contains, we cann't use <code>sizeof(arr)/sizeof(arr[0])</code> any more, because <code>sizeof(arr</code>) will just give us the size of a pointer.</p>
<p>So in the <code>func</code> function, how do we tell the array's size? An obvious way is we can pass another length paramter to tell this <code>func</code> the array length.</p>
<pre><code class="language-c">void func(int arr[], int len) {
   // ...
}
</code></pre>
<p>Or we use the array's address as the paramter :</p>
<pre><code class="language-c">void func2(int (*arr)[10]) {
    size_t size = sizeof(*arr);
    printf(&quot;Inside func2: %ld\n&quot;, size);
}
</code></pre>
<p>If in our <code>main</code> function, we call this <code>func2</code> as <code>func2(&amp;arr);</code>, it will print <code>Inside func2: 40</code>.</p>
<p>For our <code>func2</code> function, we write a fixed length 10 there. If we want the same trick works for variable length array, we could define the function like this:</p>
<pre><code class="language-c">void func3(int n, int (*arr)[n]) {
    size_t size = sizeof(*arr);
    printf(&quot;Inside func3: %ld\n&quot;, size);
}
</code></pre>
<p>Then call it like <code>func3(10, &amp;arr)</code>, it will also print out the size to be 40.</p>
<h3 id="variable-length-array-vla">Variable Length Array  (VLA)</h3>
<p>In the above example, we defined a fixed length array, and when compiler sees <code>sizeof</code>, it immidiately know the size. But what if the array's length is determined at the run time? Say if we have code:</p>
<pre><code class="language-c">int main() {}
    int len = 0;
    scanf(&quot;%d&quot;, &amp;len);
    int arr2[len];
    size = sizeof(arr2);
    printf(&quot;arr2 size: %ld\n&quot;, size);
    return 0;
}
</code></pre>
<p>Here we take the length from user input, can compiler output the right array size in this case? or it will just treat the array as a pointer now?</p>
<p>If we try it: we type 10 as the length, it prints arr2 size: 40; we type 20 as the length, it prints arr2 size: 80. So although the size determined during run time, the compiler still has a way to tell use the correct size.</p>
<p>If we check the generated assembly code, this time the compiler generated much more than the fixed length:</p>
<pre><code class="language-assembly"># main.c:17:     int arr2[len];
    movl    -124(%rbp), %ecx    # len, len.0_19
# main.c:17:     int arr2[len];
    movslq  %ecx, %rax  # len.0_19, _1
    subq    $1, %rax    #, _2
    movq    %rax, -112(%rbp)    # _2, D.2335
    movslq  %ecx, %rax  # len.0_19, _4
    movq    %rax, %r14  # _4, _5
    movl    $0, %r15d   #, _5
    movslq  %ecx, %rax  # len.0_19, _9
    movq    %rax, %r12  # _9, _10
    movl    $0, %r13d   #, _10
    movslq  %ecx, %rax  # len.0_19, _12
    leaq    0(,%rax,4), %rdx    #, _24
    movl    $16, %eax   #, tmp122
    subq    $1, %rax    #, tmp103
    addq    %rdx, %rax  # _24, tmp104
    movl    $16, %edi   #, tmp123
    movl    $0, %edx    #, tmp107
    divq    %rdi    # tmp123
    imulq   $16, %rax, %rax #, tmp106, tmp108
    movq    %rax, %rdx  # tmp108, tmp110
    andq    $-4096, %rdx    #, tmp110
    movq    %rsp, %rsi  #, tmp111
    subq    %rdx, %rsi  # tmp110, tmp111
    movq    %rsi, %rdx  # tmp111, tmp111
.L3:
    cmpq    %rdx, %rsp  # tmp111,
    je  .L4 #,
    subq    $4096, %rsp #,
    orq $0, 4088(%rsp)  #,
    jmp .L3 #
.L4:
    movq    %rax, %rdx  # tmp108, tmp112
    andl    $4095, %edx #, tmp112
    subq    %rdx, %rsp  # tmp112,
    movq    %rax, %rdx  # tmp108, tmp113
    andl    $4095, %edx #, tmp113
    testq   %rdx, %rdx  # tmp113
    je  .L5 #,
    andl    $4095, %eax #, tmp114
    subq    $8, %rax    #, tmp114
    addq    %rsp, %rax  #, tmp115
    orq $0, (%rax)  #,
.L5:
    movq    %rsp, %rax  #, tmp109
    addq    $3, %rax    #, tmp116
    shrq    $2, %rax    #, tmp117
    salq    $2, %rax    #, tmp118
    movq    %rax, -104(%rbp)    # tmp118, arr2.1
# main.c:18:     size = sizeof(arr2);
    movslq  %ecx, %rax  # len.0_19, _14
# main.c:18:     size = sizeof(arr2);
    salq    $2, %rax    #, tmp119
    movq    %rax, -120(%rbp)    # tmp119, size
</code></pre>
<p>We won't dive into details for this code (to see the explanation, you can <a href="https://stackoverflow.com/questions/10078283/how-sizeofarray-works-at-runtime">check it here</a>), but we can see for VLA, <code>sizeof</code> can still correctly evaluate the array size in run time..</p>
<h3 id="malloc-and-free">malloc and free</h3>
<p>Another question is, we know if we allocate some memory using <code>malloc</code>, and when we free the memory with the <code>free</code> function, we never pass a second parameter to tell the size (how many memory needs to be free'ed), how does the compiler know that?</p>
<p>The magic is behind the <code>malloc</code> function, for example, when we call the <code>p = malloc(10)</code> function, although it returns us the address for 10 bytes, under the hood, it will allocate more to keep some meta data like the size. For example, a simplest method could be, it allocate 4 bytes + 10 bytes where the first 4 bytes is used to save the size 10, then it returns the memory address starts from the 10 bytes. Later when we call the <code>free(p)</code> function, <code>free</code> can first use p - 4 bytes to read what the size is, then do a proper delete.</p>
<h3 id="takeaways">Takeaways</h3>
<ol>
<li>array and pointer are different</li>
<li>when pass an array as parameter to function, it decays to pointer</li>
<li>we can pass a array pointer as parameter to keep it behaves as an array instead of a pointer</li>
<li>even array's length is determined during the run time, sizeof can still print out correct size</li>
<li>malloc function will allocate more to save the size info such that later the free function can get the correct size to free</li>
</ol>
<h3 id="reference">Reference:</h3>
<ol>
<li><a href="https://www.quora.com/Why-doesn%E2%80%99t-sizeof-a-sizeof-a-0-work-for-an-array-passed-as-a-parameter">https://www.quora.com/Why-doesn%E2%80%99t-sizeof-a-sizeof-a-0-work-for-an-array-passed-as-a-parameter</a></li>
<li><a href="https://stackoverflow.com/questions/851958/where-do-malloc-and-free-store-allocated-sizes-and-addresses">https://stackoverflow.com/questions/851958/where-do-malloc-and-free-store-allocated-sizes-and-addresses</a></li>
<li><a href="https://stackoverflow.com/questions/10078283/how-sizeofarray-works-at-runtime">https://stackoverflow.com/questions/10078283/how-sizeofarray-works-at-runtime</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Initialize C Structure]]></title>
        <id>https://bofeng.github.io/post/initialize-c-structure/</id>
        <link href="https://bofeng.github.io/post/initialize-c-structure/">
        </link>
        <updated>2020-04-03T17:15:54.000Z</updated>
        <content type="html"><![CDATA[<p>Define C structure and initialize it.</p>
<pre><code class="language-c">#include &lt;stdio.h&gt;

typedef struct _date {
    int year;
    int month;
    int day;
} Date;


typedef struct _time {
    int hour;
    int minute;
    int second;
} Time;

typedef struct _datetime {
    Date date;
    Time time;
} Datetime;


void print_date(Date date) {
    printf(&quot;Year: %d, Month: %d, Day: %d\n&quot;, date.year, date.month, date.day);
}

void print_datetime(Datetime dt) {
    printf(&quot;%d-%d-%d %d:%d:%d\n&quot;, 
           dt.date.year, dt.date.month, dt.date.day,
           dt.time.hour, dt.time.minute, dt.time.second);
}


int main() {
    Date today = {2020, 4, 4};
    Date tomorrow = {.year=2020, .month=4, .day=5};

    print_date(today);
    print_date(tomorrow);

    today = (Date) {2020, 4, 3};
    print_date(today);

    Datetime now = {
        {2020, 4, 4},
        {.hour=13, .minute=37, .second=40}
    };
    print_datetime(now);

    return 0;
}
</code></pre>
<p>Compile and run:</p>
<pre><code>Year: 2020, Month: 4, Day: 4
Year: 2020, Month: 4, Day: 5
Year: 2020, Month: 4, Day: 3
2020-4-4 13:37:40
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Back Pressure]]></title>
        <id>https://bofeng.github.io/post/back-pressure/</id>
        <link href="https://bofeng.github.io/post/back-pressure/">
        </link>
        <updated>2020-02-23T05:17:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="resources">Resources:</h2>
<p>1, <a href="https://medium.com/@jayphelps/backpressure-explained-the-flow-of-data-through-software-2350b3e77ce7">Backpressure explained — the resisted flow of data through software</a></p>
<p>2, Flask Author: <a href="https://lucumr.pocoo.org/2020/1/1/async-pressure/">I'm not feeling the async pressure</a></p>
<p>3, Answer from Starlette author: <a href="https://github.com/encode/starlette/issues/802#issuecomment-574606003">Back pressure?</a> :</p>
<blockquote>
<p>However network backpressure isn't actually the only thing we'd like to have in place here. We also want to ensure resource limiting at any potential bottlenecks. The most notable case here would be the number of available database connections.</p>
<p>Uvicorn currently allows you to set a --limit-concurrency <int> which hard-limits the maximum number of allowable tasks which may be running before 503's will be returned. In the most constrained case you could just set this based on the number of available database connections.</p>
</blockquote>
<p>4, Answer from FastAPI: <a href="https://github.com/tiangolo/fastapi/issues/857">Back pressure?</a> :</p>
<blockquote>
<p>the author of starlette has been aware of this issue for (at least) going on two years so I don't think there is any reason to panic<br>
... in practice you can usually prevent backpressure issues by just using a rate-limiting load balancer and a good auto-scaling policy. This won't handle all cases, and won't save you from particularly bad design choices, but for 99% of deployed python applications this would already be overkill.</p>
</blockquote>
<p>5, <a href="https://stackoverflow.com/questions/54454841/performance-decrease-when-using-nginx-as-reverse-proxy-for-sanic-gunicorn">Use sanic with Nginx</a></p>
<blockquote>
<p>Normally, nginx is supposed to control the backpressure for your backend ...</p>
</blockquote>
<p>6, <a href="https://pymongo.readthedocs.io/en/3.10.0/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient">Pymongo's connection pool size</a></p>
<blockquote>
<p>maxPoolSize (optional): The maximum allowable number of concurrent connections to each connected server. Requests to a server will block if there are maxPoolSize outstanding connections to the requested server. Defaults to 100. Cannot be 0.</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🌟 Starlette Quick Manual]]></title>
        <id>https://bofeng.github.io/post/starlette-quick-manual/</id>
        <link href="https://bofeng.github.io/post/starlette-quick-manual/">
        </link>
        <updated>2020-02-09T23:39:23.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://www.starlette.io/">Starlette</a> is an ASGI web framework for Python.</p>
<h2 id="1-get-value-from-query-string">1, Get value from Query String</h2>
<p>This is commonly used when trying to get param value from GET request.</p>
<pre><code class="language-python">async def handler(request):
    name = request.query_params.get(&quot;name&quot;)
</code></pre>
<h2 id="2-get-value-from-path">2, Get value from Path</h2>
<pre><code class="language-python"># In url if you config:
Route(&quot;/post/{postid}&quot;, endpoint=post)

# In handler function:
async def post(request):
    postid = request.path_params.get(&quot;postid&quot;)
</code></pre>
<h2 id="3-get-value-from-body">3, Get value from Body</h2>
<p>This is commonly used when trying to get param value from a POST request.</p>
<pre><code class="language-python">async def handler(request):
    inp = await request.form()
    name = inp.get(&quot;name&quot;)
</code></pre>
<h2 id="4-get-uploaded-file-content">4, Get uploaded file content</h2>
<pre><code class="language-python">async def handler(request):
    inp = await request.form()
    uploaded_file = inp[&quot;filename&quot;]
    filename = uploaded_file.filename           # abc.png
    content_type = uploaded.content_type    # MIME type, e.g. image/png
    content = await uploaded_file.read()       # image content
</code></pre>
<h2 id="5-return-a-rendered-page-response">5, Return a rendered page response</h2>
<pre><code class="language-python">from starlette.templating import Jinja2Templates
TMPL_ENGINE = Jinja2Templates(directory=&quot;templates&quot;)

async def handler(request):
    data = {
        &quot;request&quot;: request,
        # ... other data
    }
    return TMPL_ENGINE.TemplateResponse(&quot;home.html&quot;, data)
</code></pre>
<h2 id="6-return-a-json-response">6, Return a JSON response</h2>
<pre><code class="language-python">from starlette.responses import JSONResponse

async def handler(request):
    return JSONResponse({&quot;name&quot;: &quot;Bo&quot;})
</code></pre>
<h2 id="7-return-a-customized-response-status-code-and-headers">7, Return a customized response (status code and headers)</h2>
<p>The above <code>TemplateResponse</code> and <code>JSONResponse</code> are subclass of the <code>Response</code> class. We can return a customized <code>Response</code>:</p>
<pre><code class="language-python">import json
from starlette.responses import Response

async def handler(request):
    data = {
        &quot;name&quot;: &quot;Bo&quot;
    }
    return Response(json.dumps(data), media_type=&quot;application/json&quot;)
</code></pre>
<p><code>Response</code> takes <code>status_code</code>, <code>headers</code> and <code>media_type</code>, so if we want to change a response's status code, we can do:</p>
<pre><code class="language-python">return Response(content, statu_code=404)
</code></pre>
<p>And customized headers:</p>
<pre><code class="language-python">headers = {
	&quot;x-extra-key&quot;: &quot;value&quot;
}
return Response(content, status_code=200, headers=headers)
</code></pre>
<p>Since <code>TemplateResponse</code> and <code>JSONResponse</code> are subclass of <code>Response</code>, these 3 parameters can be applied to them.</p>
<pre><code class="language-python">return TMPL_ENGINE.TemplateResponse(&quot;home.html&quot;, data, headers=headers)
# And
return JSONResponse({&quot;name&quot;: &quot;Bo&quot;}, status_code=200, headers=headers)
</code></pre>
<h2 id="8-redirect">8, Redirect</h2>
<pre><code class="language-python">from starlette.responses import RedirectResponse

async handler(request):
    # Customize status_code: 
    #   301: permanent redirect 
    #   302: temporary redirect 
    #   303: see others
    #   307: temporary redirect (default)
    return RedirectResponse(url=url, status_code=303)
</code></pre>
<h2 id="9-get-set-cookies">9, Get &amp; Set Cookies</h2>
<pre><code class="language-python"># get cookie
async def handler(request):
    request.cookies.get('mycookie')

# set cookie
async def handler(request):
    resp = Response(content)
    # set_cookie(key, value, max_age=None, expires=None, path=&quot;/&quot;, domain=None, secure=False, httponly=False)
    resp.set_cookie(&quot;mycookie&quot;, &quot;value&quot;)
    # delete cookie: delete_cookie(key, path='/', domain=None)
    resp.delete_cookie(&quot;myoldcookie&quot;)
    return resp
</code></pre>
<h2 id="10-use-session">10, Use session</h2>
<p>Starlette provides a cookie-based session middleware:</p>
<pre><code class="language-python">from starlette.middleware import Middleware
from starlette.middleware.sessions import SessionMiddleware

middlewares = [
    Middleware(SessionMiddleware,
                secret_key=config.SESSION_CONFIG[&quot;secret_key&quot;],
                max_age=config.SESSION_CONFIG[&quot;max_age&quot;]),
]

app = Starlette(routes=routes, middleware=middlewares)

# Then in handler you can use it
async def handler(request):
    request.session[&quot;login_user&quot;] = &quot;bo&quot;
</code></pre>
<p>Since this middleware used <code>json</code> to serialize and deserialize data, the data you saved in session need to be <code>json</code> serializiable. For example, if you save a <code>ObjectId</code> object (from MongoDB) in session, it won't know how to use json to serialize it, thus will raise exception and cannot save to cookie.</p>
<h2 id="11-request-context">11, Request context</h2>
<h3 id="1-url-object-requesturl">1) URL Object: <code>request.url</code></h3>
<ul>
<li>Get request full url: <code>url = str(request.url)</code></li>
<li>Get scheme: <code>request.url.scheme</code> (http, https, ws, wss)</li>
<li>Get netloc: <code>request.url.netloc</code>, e.g.: example.com:8080</li>
<li>Get path: <code>request.url.path</code>, e.g.: /search</li>
<li>Get query string: <code>request.url.query</code>, e.g.: kw=hello</li>
<li>Get hostname: <code>request.url.hostname</code>, e.g.: example.com</li>
<li>Get port: <code>request.url.port</code>, e.g.: 8080</li>
<li>If using secure scheme: <code>request.url.is_secure</code>, True is schme is <code>https</code> or <code>wss</code></li>
</ul>
<h3 id="2-headers-requestheaders">2) Headers: <code>request.headers</code></h3>
<pre><code class="language-python">{
    'host': 'example.com:8080', 
    'connection': 'keep-alive', 
    'cache-control': 'max-age=0', 
    'sec-ch-ua': 'Google Chrome 80', 
    'dnt': '1', 
    'upgrade-insecure-requests': '1', 
    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) ...',
    'sec-fetch-dest': 'document', 
    'accept': 'text/html,image/apng,*/*;q=0.8;v=b3;q=0.9', 
    'sec-origin-policy': '0', 
    'sec-fetch-site': 'none', 
    'sec-fetch-mode': 'navigate', 
    'sec-fetch-user': '?1', 
    'accept-encoding': 'gzip, deflate, br', 
    'accept-language': 'en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7,zh-TW;q=0.6', 
    'cookie': 'session=eyJhZG1pbl91c2_KiQ...'
}
</code></pre>
<h3 id="3-client-requestclient">3) Client: <code>request.client</code></h3>
<ul>
<li><code>request.client.host</code>: get client sock IP</li>
<li><code>request.client.port</code>: get client sock port</li>
</ul>
<h3 id="4-method-requestmethod">4) Method: <code>request.method</code></h3>
<ul>
<li><code>request.method</code>: GET, POST, etc.</li>
</ul>
<h3 id="5-get-data">5) Get Data</h3>
<ul>
<li><code>await request.body()</code>: get raw data from body</li>
<li><code>await request.json()</code>: get passed data and parse it as JSON</li>
<li><code>await request.form()</code>: get posted data and pass it as dictionary</li>
</ul>
<h3 id="6-scope-requestscope">6) Scope: <code>request.scope</code></h3>
<pre><code class="language-python">{
    'type': 'http', 
    'http_version': '1.1', 
    'server': ('127.0.0.1', 9092), 
    'client': ('127.0.0.1', 53102), 
    'scheme': 'https', 
    'method': 'GET', 
    'root_path': '', 
    'path': '/', 
    'raw_path': b'/', 
    'query_string': b'kw=hello', 
    'headers': [
        (b'host', b'example.com:8080'), 
        (b'connection', b'keep-alive'), 
        (b'cache-control', b'max-age=0'), 
        ...
    ], 
    'app': &lt;starlette.applications.Starlette object at 0x1081bd650&gt;, 
    'session': {'uid': '57ba03ea7333f72a25f837cf'}, 
    'router': &lt;starlette.routing.Router object at 0x1081bd6d0&gt;, 
    'endpoint': &lt;class 'app.index.Index'&gt;, 
    'path_params': {}
}
</code></pre>
<h2 id="12-put-varaible-in-request-app-scope">12, Put varaible in request &amp; app scope</h2>
<pre><code class="language-python">app.state.dbconn = get_db_conn()
request.state.start_time = time.time()
# use app-scope state variable in a request
request.app.state.dbconn
</code></pre>
<h2 id="13-utility-functions">13, Utility functions</h2>
<h3 id="1-use-state-to-wrap-a-dictionary">1) Use <code>State</code> to wrap a dictionary</h3>
<pre><code class="language-python">from starlette.datastructures import State

data = {
    &quot;name&quot;: &quot;Bo&quot;
}
print(data[&quot;name&quot;])
# now wrap it with State function
wrapped = State(data)
# You can use the dot syntaxt, but can't use `wrapped[&quot;name&quot;]` any more.
print(wrapped.name)
</code></pre>
<h3 id="2-check-if-request-is-a-ajax-request">2) check if request is a ajax request</h3>
<p>Depend on what client library you are using, the header's key and value might be different. Here is an example when use <code>$.ajax</code> function from jQuery.</p>
<pre><code class="language-python">return request.headers.get(&quot;x-requested-with&quot;) == &quot;XMLHttpRequest&quot;
</code></pre>
<h3 id="3-login_required-wrapper-function">3) login_required wrapper function</h3>
<pre><code class="language-python">import functools
from starlette.endpoints import HTTPEndpoint
from starlette.responses import Response

def login_required(login_url=&quot;/signin&quot;):
    def decorator(handler):
        @functools.wraps(handler)
        async def new_handler(obj, req, *args, **kwargs):
            user = req.session.get(&quot;login_user&quot;)
            if user is None:
                return seeother(login_url)
            return await handler(obj, req, *args, **kwargs)
        return new_handler
    return decorator

class MyAccount(HTTPEndpiont):
    @login_required()
    async def get(self, request):
        # some logic here
        content = &quot;hello&quot;
        return Response(content)
</code></pre>
<h2 id="14-exceptions">14, Exceptions</h2>
<p>Handle exception and customize 403, 404, 503, 500 page:</p>
<pre><code class="language-python">from starlette.exceptions import HTTPException

async def exc_handle_403(request, exc):
    return HTMLResponse(&quot;My 403 page&quot;, status_code=exc.status_code)

async def exc_handle_404(request, exc):
    return HTMLResponse(&quot;My 404 page&quot;, status_code=exc.status_code)

async def exc_handle_503(request, exc):
    return HTMLResponse(&quot;Failed, please try it later&quot;, status_code=exc.status_code)

# error is not exception, 500 is server side unexpected error, all other status code will be treated as Exception
async def err_handle_500(request, exc):
    import traceback
    Log.error(traceback.format_exc())
    return HTMLResponse(&quot;My 500 page&quot;, status_code=500)

# To add handler, we can add either status_code or Exception itself as key
exception_handlers = {
    403: exc_handle_403,
    404: exc_handle_404,
    503: exc_handle_503,
    500: err_handle_500,
    #HTTPException: exc_handle_500,
}

app = Starlette(routes=routes, exception_handlers=exception_handlers)
</code></pre>
<h2 id="15-background-task">15, Background Task</h2>
<h3 id="1-put-some-async-task-as-background-task">1) Put some async task as background task</h3>
<pre><code class="language-python">import aiofiles
from starlette.background import BackgroundTask
from starlette.responses import Response

aiofiles_remove = aiofiles.os.wrap(os.remove)

async def del_file(fpath):
    await aiofiles_remove(fpath)

async def handler(request):
    content = &quot;&quot;
    fpath = &quot;/tmp/tmpfile.txt&quot;
    task = BackgroundTask(del_file, fpath=fpath)
    return Response(content, background=task)
</code></pre>
<h3 id="2-put-multiple-tasks-as-background-task">2) Put multiple tasks as background task</h3>
<pre><code class="language-python">from starlette.background import BackgroundTasks

async def task1(name):
    pass

async def task2(email):
    pass

async def handler(request):
    tasks = BackgroundTasks()
    tasks.add_task(task1, name=&quot;John&quot;)
    tasks.add_task(task2, email=&quot;info@example.com&quot;)
    content = &quot;&quot;
    return Response(content, background=tasks)
</code></pre>
<h2 id="16-write-middleware">16, Write middleware</h2>
<p>There are 2 ways to write middleware:</p>
<h3 id="1-define-__call__-function">1) Define <code>__call__</code> function:</h3>
<pre><code class="language-python">class MyMiddleware:
    def __init__(self, app):
        self.app = app

    async def __call__(self, scope, receive, send):
        # see above scope dictionary as reference
        headers = dict(scope[&quot;headers&quot;])
        # do something
        # pass to next middleware
        return await self.app(scope, receive, send)
</code></pre>
<h3 id="2-use-basehttpmiddleware">2) Use <code>BaseHTTPMiddleware</code></h3>
<pre><code class="language-python">from starlette.middleware.base import BaseHTTPMiddleware

class CustomHeaderMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request, call_next):
        # do something before pass to next middleware
        response = await call_next(request)
        # do something after next middleware returned
        response.headers['X-Author'] = 'John'
        return response
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🚀 Deploy Poll App to Rocket.chat]]></title>
        <id>https://bofeng.github.io/post/deploy-poll-app-to-rocketchat/</id>
        <link href="https://bofeng.github.io/post/deploy-poll-app-to-rocketchat/">
        </link>
        <updated>2020-01-29T05:31:39.000Z</updated>
        <content type="html"><![CDATA[<p>You don't have to connect to rocket.chat cloud to install apps from the market place. If you have the app's code, you can deploy the app yourself.</p>
<p>Here is an example to deploy <code>poll</code> app:</p>
<p>1, Install the <code>rc-apps</code> tool: <code>npm install -g @rocket.chat/apps-cli</code>. To confirm <code>rc-apps</code> has been successfully installed, run <code>rc-apps -v</code><br>
2, To install the <code>poll</code> app, go to <a href="https://github.com/sampaiodiego/rocket.chat.app-poll">https://github.com/sampaiodiego/rocket.chat.app-poll</a><br>
3, Clone the repo: <a href="https://github.com/sampaiodiego/rocket.chat.app-poll.git">https://github.com/sampaiodiego/rocket.chat.app-poll.git</a><br>
4, cd to the repo, and install dependencies with <code>npm install</code> and <code>npm i @types/node</code><br>
5, Build the <code>poll</code> package: <code>rc-apps package</code><br>
6, Deploy: <code>rc-apps deploy</code>. When run this command, it will prompt to ask you input your rocket.chat server url, admin's username and password, like this:</p>
<pre><code>What is the server's url (include https)?: https://rc.example.com
What is the username?: admin
And, what is the password?: *********
deploying your app... deployed!
</code></pre>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="https://rocket.chat/docs/developer-guides/developing-apps/getting-started/">https://rocket.chat/docs/developer-guides/developing-apps/getting-started/</a></li>
<li><a href="https://github.com/sampaiodiego/rocket.chat.app-poll">https://github.com/sampaiodiego/rocket.chat.app-poll</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🚁 Proxy Websocket Timeout ]]></title>
        <id>https://bofeng.github.io/post/proxy-websocket-timeout/</id>
        <link href="https://bofeng.github.io/post/proxy-websocket-timeout/">
        </link>
        <updated>2019-12-11T16:55:43.000Z</updated>
        <content type="html"><![CDATA[<p>之前在<a href="https://bofeng.github.io/post/proxy-websocket-configuration-in-apache-and-nginx/">这篇文章</a>里提到用Nginx和Apache代理websocket的连接，一个项目在测试机上有人反映如果一分钟没有在ws上输入信息，连接就会断掉。</p>
<p>打log之后在client端显示是ws.onclose的事件被触发了，触发的event的code是1006，reason是&quot;&quot;，搜了一圈发现是Nginx的配置问题。Nginx在proxy ws的时候，默认的read timeout是60秒，如果在60秒内ws上没有数据传输，Nginx就会把它断掉。</p>
<p>解决方法是在proxy的配置上添加timeout的设置：</p>
<pre><code class="language-nginx">location /ws/ {
        proxy_pass &quot;http://localhost:8765/ws/&quot;;
        proxy_http_version 1.1;
        proxy_read_timeout 1800;  # 添加
        proxy_send_timeout 1800;  # 添加
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &quot;Upgrade&quot;;
}
</code></pre>
<p>在另外Apache的机器上经测试没有这个1分钟超时的问题，因为<a href="https://httpd.apache.org/docs/trunk/mod/mod_proxy_wstunnel.html#proxywebsocketidletimeout">Apache默认的IdleTimeout是0</a>，也就是永不超时，所以跑Apache代理ws的机器没有这个问题。</p>
<h3 id="reference">Reference</h3>
<ul>
<li><a href="https://github.com/websockets/ws/issues/1598#issuecomment-504794623">https://github.com/websockets/ws/issues/1598#issuecomment-504794623</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Proxy Websocket Configuration in Apache and Nginx]]></title>
        <id>https://bofeng.github.io/post/proxy-websocket-configuration-in-apache-and-nginx/</id>
        <link href="https://bofeng.github.io/post/proxy-websocket-configuration-in-apache-and-nginx/">
        </link>
        <updated>2019-12-06T06:53:23.000Z</updated>
        <content type="html"><![CDATA[<p>Proxy websocket to backend application.</p>
<h3 id="apache">Apache:</h3>
<p>First enable <code>proxy_wstunnel.load</code> mod in mods-enabled folder:</p>
<pre><code class="language-bash">cd /etc/apache2/mods-enabled
ln -s ../mods-available/proxy_wstunnel.load ./
</code></pre>
<p>Assume your backend websocket application running at port 8765, and the client side needs to connect to <code>ws://yourwebsite.com/ws/</code>.</p>
<p>In your site config file, add:</p>
<pre><code class="language-apache">    ProxyRequests off
    ProxyPass /ws/ ws://localhost:8765/ retry=1
    ProxyPassReverse /ws/ ws://localhost:8765/

    RewriteEngine on
    RewriteCond %{HTTP:UPGRADE} ^WebSocket$ [NC]
    RewriteCond %{HTTP:CONNECTION} ^Upgrade$ [NC]
    RewriteRule /ws/.* ws://localhost:8765%{REQUEST_URI} [P]
</code></pre>
<h3 id="nginx">Nginx</h3>
<pre><code class="language-nginx">map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 443 ssl;
    server_name yourwebsite.com

    # ...

    location /ws/ {
        proxy_pass &quot;http://localhost:8765/ws/&quot;;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection &quot;Upgrade&quot;;
    }

    # ...
}
</code></pre>
<h3 id="reference">Reference</h3>
<ul>
<li>https://www.nginx.com/blog/websocket-nginx/</li>
<li>https://stackoverflow.com/questions/12102110/nginx-to-reverse-proxy-websockets-and-enable-ssl-wss</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[passwd & shadow]]></title>
        <id>https://bofeng.github.io/post/passwd-and-shadow/</id>
        <link href="https://bofeng.github.io/post/passwd-and-shadow/">
        </link>
        <updated>2019-04-06T18:59:11.000Z</updated>
        <summary type="html"><![CDATA[<p>Linux user's password is saved in <code>/etc/shadow</code> file, format like:</p>
]]></summary>
        <content type="html"><![CDATA[<p>Linux user's password is saved in <code>/etc/shadow</code> file, format like:</p>
<!-- more -->
<pre><code class="language-bash">root:$6$MksUWINOmX.9ZXyP$yjO8RvJj5i9.G/mOx7ZA3npdX05iv5Z07k3zI/02LMBjPE01e8hUlVhMNNpzRIWG1n0n6flWZGgW2T/LsZGRT0:17885:0:99999:7:::
</code></pre>
<p>第一个字段是username, <code>$6</code> 是hash method，6表示SHA-512, <code>$MksUWINOmX.9ZXyP</code>是SALT。 <code>$yjO8RvJj5i9.G/mOx7ZA...WZGgW2T/LsZGRT0</code> 是加密后的字符串。</p>
<p>当用户使用<code>passwd</code>命令时，会将encrypted后的密码存入<code>/etc/shadow</code>文件。<code>/etc/shadow</code>文件是只有root可读可写的，那为什么普通用户也可以运行passwd命令写入此文件？这是因为passwd的&quot;设置用户运行位&quot;被set了。</p>
<pre><code class="language-bash">$ ls -alh /usr/bin/passwd
-rwsr-xr-x 1 root root 59K Jan 25  2018 passwd
</code></pre>
<p>注意上面的rws中的s，表示不论是谁运行passwd，将运行的用户设置为此文件的拥有用户（也就是root），所以即使当普通用户运行passwd时，用<code>ps axu | grep passwd</code>也可以看到实际的运行用户是root。</p>
<p>Python验证登录：</p>
<pre><code class="language-python">import crypt
print(crypt.crypt(&quot;myloginpwd&quot;, &quot;$6$MksUWINOmX.9ZXyP&quot;))
$6$MksUWINOmX.9ZXyP$yjO8RvJj5i9.G/mOx7ZA3npdX05iv5Z07k3zI/02LMBjPE01e8hUlVhMNNpzRIWG1n0n6flWZGgW2T/LsZGRT0
</code></pre>
<p>可以看到crypt后的字符串和shadow中的相同，说明密码(myloginpwd)是正确的。</p>
]]></content>
    </entry>
</feed>